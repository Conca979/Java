Difference between Inheritance and Composition
Answer: Inheritance and composition are both object-oriented programming concepts used to promote code reuse, but they represent different types of relationships between classes.
Inheritance represents an "is-a" relationship. A child class inherits properties and methods from a parent class. It is best used for creating a hierarchical classification of objects where a subclass is a specialized version of a superclass. For example, a Dog class could inherit from an Animal class, since a dog "is an" animal. 
Composition represents a "has-a" relationship. A class contains an instance of another class as a member variable. This allows the containing class to use the functionality of the contained class. Composition is generally more flexible and less coupled than inheritance, as it avoids the rigid hierarchy that inheritance creates. For example, a Car class could have an Engine object as a member, since a car "has an" engine. 